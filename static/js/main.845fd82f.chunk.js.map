{"version":3,"sources":["components/Header/Header.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Main","title","paragraph","color","img","map","a","i","key","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPAEe,SAASA,IACvB,OACC,gCACC,4BACC,0BAAMC,UAAU,WAAhB,gCACA,0BAAMA,UAAU,WAAhB,0BAED,uJ,MCPY,SAASC,IA+BvB,OACC,8BACC,mBAhCM,WAoBP,MAnBU,CACT,CAACC,MAAM,aACPC,UAAU,mDACVC,MAAM,QACNC,IAAI,gCAEJ,CAACH,MAAM,eACPC,UAAU,kEACVC,MAAM,MACNC,IAAI,kCACJ,CAACH,MAAM,QACPC,UAAU,mDACVC,MAAM,SACNC,IAAI,2BACJ,CAACH,MAAM,aACPC,UAAU,oEACVC,MAAM,OACNC,IAAI,iCAGGC,KAAI,SAACC,EAAEC,GACZ,OAAM,yBAAKC,IAAKD,EAAGR,UAAWO,EAAEH,MAAO,UACtC,wBAAIJ,UAAU,WAAWO,EAAEL,OAC3B,2BAAIK,EAAEJ,WACN,yBAAKO,IAAKH,EAAEF,IAAKM,IAAKJ,EAAEF,YAO3B,OCtBYO,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACF,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.845fd82f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.scss'\r\nexport default function Header() {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>\r\n\t\t\t\t<span className=\"bold200\">Reliable, efficient delivery</span>\r\n\t\t\t\t<span className=\"bold700\">Powered by Technology</span>\r\n\t\t\t</h1>\r\n\t\t\t<p>Our Artificial Intelligence powered tools\r\n\t\t\t use millions of project data points to ensure\r\n\t\t\t that your project is successful</p>\r\n\t\t</header>\r\n\t)\r\n}","import React from 'react'\r\nimport './Main.scss'\r\nexport default function Main() {\r\n\tvar Div=()=>{\r\n\t\tvar value=[\r\n\t\t\t{title:\"Supervisor\",\r\n\t\t\tparagraph:\"Monitors activity to identity project roadblocks\",\r\n\t\t\tcolor:'green',\r\n\t\t\timg:'./images/icon-supervisor.svg'\r\n\t\t\t},\r\n\t\t\t{title:\"Team Builder\",\r\n\t\t\tparagraph:\"Scans our talent network to create the optimal team for project\",\r\n\t\t\tcolor:'red',\r\n\t\t\timg:'./images/icon-team-builder.svg'},\r\n\t\t\t{title:\"Karma\",\r\n\t\t\tparagraph:\"Regularly evaluates our talent to ensure quality\",\r\n\t\t\tcolor:'orange',\r\n\t\t\timg:'./images/icon-karma.svg'},\r\n\t\t\t{title:\"Calculator\",\r\n\t\t\tparagraph:\"Uses data from past projects to provide better delivery estimates\",\r\n\t\t\tcolor:'blue',\r\n\t\t\timg:'./images/icon-calculator.svg'}\r\n\t\t]\r\n\t\treturn(\r\n\t\t\t\tvalue.map((a,i)=>{\r\n\t\t\t\t\treturn<div key={i} className={a.color +' items'+''}>\r\n\t\t\t\t\t\t<h2 className=\"bold700\">{a.title}</h2>\r\n\t\t\t\t\t\t<p>{a.paragraph}</p>\r\n\t\t\t\t\t\t<img src={a.img} alt={a.img}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t}\r\n\treturn (\r\n\t\t<main>\r\n\t\t\t<Div/>\r\n\t\t</main>\r\n\t)\r\n}","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header/Header'\nimport Main from './components/Main/Main'\nfunction App() {\n  return (\n    <>\n      <Header/>\n    <Main/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}